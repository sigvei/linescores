#Â encoding: UTF-8
class ApplicationController < ActionController::Base
  protect_from_forgery

  def get_player_stats(shots, sortorder=nil)
    if shots.size > 0
      begin
        require 'rserve/simpler/R'

        data = shots_to_data(shots)

        R.command(df: data) do
          %Q{
            separate <- with(df, aggregate(score, by=list(player=player, type=type), FUN=mean))
            separate_n <- with(df, aggregate(score, by=list(player=player, type=paste(type, ' #')), FUN=length))
            totals   <- with(df, aggregate(score, by=list(player=player, type=rep('Total', nrow(df))), FUN=mean))
            ddf <- rbind(separate, separate_n, totals)
          }
        end
        stats = R.converse("reshape(ddf[order(ddf$type),], idvar='player', timevar='type', direction='wide')")
        if stats.first.is_a? String
          [ stats ]
        else
          stats = stats.transpose
        end

        # Fix string encoding in first column
        stats.map! do |row|
          [ row[0].force_encoding("UTF-8") ] + row[1..-1]
        end

        # Sort 
        if sortorder
          stats.sort_by! do |row|
            sortorder.index(row[0]) || -1
          end
        end

        stats
      rescue LoadError
        nil
      end
    end
  end

  def get_end_by_end_stats(shots)
    if shots.size > 0
      begin
        require 'rserve/simpler/R'

        data = shots_to_data(shots)

        R.command(df: data) do
          %Q{
            df$team <- factor(df$team, c('us', 'them'))
            df$team <- relevel(df$team, 'us')
            totals <- with(df, aggregate(score, by=list(nend=nend, team=team), FUN=mean))
          }
        end
        stats = R.converse("reshape(totals, idvar='team', timevar='nend', direction='wide')")

        # Get ends numbers. This is not always a uniform series.
        # This regexp way is fairly flexible with regards to the auto-generated
        # variable names generated by R's aggregate().
        nends = stats.names[1..-1].map{|n| n.match(/\d+$/).to_s.to_i}

        [[""] + nends] + stats.transpose
      rescue Exception => e
        nil
      end
    end
  end

  protected

  def authenticate
    authenticate_or_request_with_http_digest do |username|
      get_users[username]
    end
  end

  private

  def get_users
    begin
      YAML.load_file("#{Rails.root}/config/users.yml")
    rescue
      { }
    end
  end

  def shots_to_data(shots)
      shots.delete_if{|s| s.call == "X"}

      {
        nend:   shots.map{|s| s.end.position},
        player: shots.map(&:player),
        turn:   shots.map(&:turn),
        call:   shots.map(&:call),
        type:   shots.map{|s| s.call.in?(Shot::DRAWS) ? "Draws" : "Takeouts"},
        score:  shots.map(&:success),
        rock:   shots.map(&:rock),
        team:   shots.map(&:team)
      }.to_dataframe
  end
end
